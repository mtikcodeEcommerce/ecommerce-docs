"use strict";(globalThis.webpackChunkecommerce_docs=globalThis.webpackChunkecommerce_docs||[]).push([[207],{7299:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"SetupAuth","title":"Setup Authorization","description":"Install","source":"@site/docs/SetupAuth.md","sourceDirName":".","slug":"/SetupAuth","permalink":"/ecommerce-docs/docs/SetupAuth","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"QuickStart","permalink":"/ecommerce-docs/docs/QuickStart"}}');var o=t(4848),s=t(8453);const r={},a="Setup Authorization",l={},c=[{value:"Install",id:"install",level:2},{value:"Create Google Auth Platform",id:"create-google-auth-platform",level:2},{value:"Setup Configuration",id:"setup-configuration",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"setup-authorization",children:"Setup Authorization"})}),"\n",(0,o.jsx)(e.h2,{id:"install",children:"Install"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Better Auth: ",(0,o.jsx)(e.code,{children:"npm install better-auth"})]}),"\n",(0,o.jsxs)(e.li,{children:["Nodemailer: ",(0,o.jsx)(e.code,{children:"npm install modemailer"})]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"create-google-auth-platform",children:"Create Google Auth Platform"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Set Authorized redirect URLs is ",(0,o.jsx)(e.code,{children:"ecommerce-backend"})," API endpoint\n",(0,o.jsx)(e.img,{src:"https://mtikcodeecommerce.github.io/ecommerce-docs/img/google-auth-platform.png",alt:"Google Cloud Auth Platform Setup Example"})]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"setup-configuration",children:"Setup Configuration"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Setup ",(0,o.jsx)(e.code,{children:"src/app/auth/auth.config.ts"}),":"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"import { betterAuth } from 'better-auth';\nimport { Pool } from 'pg';\nimport * as dotenv from 'dotenv';\nimport { EmailService } from '../email/email.service';\nimport { ConfigService } from '@nestjs/config';\n\ndotenv.config();\n\nconst configService = new ConfigService();\nconst emailService = new EmailService(configService);\n\nconst pool = new Pool({\n    host: process.env.DB_HOST || 'localhost',\n    port: parseInt(process.env.DB_PORT, 10) || 5432,\n    user: process.env.DB_USERNAME || 'postgres',\n    password: process.env.DB_PASSWORD || 'password',\n    database: process.env.DB_NAME || 'ecommerce',\n    ssl: {\n        rejectUnauthorized: false,\n    },\n    max: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000,\n});\n\nexport const auth = betterAuth({\n    database: pool,\n\n    emailAndPassword: {\n        // Enable email and password authentication method\n        // When true, users can sign up/sign in with email and password\n        enabled: true,\n        \n        // Require users to verify their email before they can fully access the app\n        // When true, users must click a verification link sent to their email\n        requireEmailVerification: true,\n        \n        // Function called when a user requests a password reset\n        // This is an async callback that Better Auth will invoke\n        sendResetPassword: async ({ user, url, token }) => {\n            // Log the reset token to console (useful for debugging)\n            // In production, remove this or use proper logging\n            console.log('tokenResetPassword', token);\n            \n            // Call your custom EmailService to send the password reset email\n            // Parameters:\n            // - user.email: recipient's email address\n            // - user.name: recipient's name for personalization\n            // - url: the complete URL the user should click to reset password\n            await emailService.sendPasswordResetEmail(\n                user.email,\n                user.name,\n                url,\n            );\n        },\n        \n        // Function called after a user successfully resets their password\n        // Useful for logging, analytics, or triggering other actions\n        onPasswordReset: async ({ user }) => {\n            // Log the password reset event\n            // In production, you might want to:\n            // - Send a notification email\n            // - Log to a security audit trail\n            // - Invalidate all existing sessions\n            console.log(`Password for user ${user.email} has been reset.`);\n        },\n    },\n\n    // ========================================================================\n    // EMAIL VERIFICATION CONFIGURATION\n    // ========================================================================\n    \n    emailVerification: {\n        // Automatically send verification email when a new user signs up\n        // When true, email is sent immediately after registration\n        sendOnSignUp: true,\n        \n        // Whether to automatically sign in the user after email verification\n        // false = user must sign in manually after verifying email\n        // true = user is automatically signed in after clicking verification link\n        autoSignInAfterVerification: false,\n        \n        // How long the verification token is valid (in seconds)\n        // 24 * 60 * 60 = 86400 seconds = 24 hours\n        // After this time, the verification link will expire\n        expiresIn: 24 * 60 * 60,\n        \n        // Function called to send the verification email\n        // This is where you implement your custom email sending logic\n        sendVerificationEmail: async ({ user, token }) => {\n            // Log the verification token (useful for debugging/testing)\n            // In development, you can copy this token to manually verify emails\n            console.log('tokenVerificationEmail', token);\n            \n            // Construct the verification URL\n            // Users will click this link to verify their email address\n            // Format: https://your-domain.com/auth/verify-email?token=ABC123&email=user@example.com\n            const verificationUrl = `${process.env.BETTER_AUTH_URL}/auth/verify-email?token=${token}&email=${user.email}`;\n            \n            // Call your custom EmailService to send the verification email\n            // The email should contain the verificationUrl as a clickable link\n            await emailService.sendVerificationEmail(\n                user.email,      // Recipient's email address\n                user.name,       // Recipient's name for personalization\n                verificationUrl, // The URL to verify the email\n            );\n        },\n    },\n\n    // ========================================================================\n    // SOCIAL AUTHENTICATION PROVIDERS (OAuth)\n    // ========================================================================\n    \n    socialProviders: {\n        // Google OAuth configuration\n        // Allows users to sign in with their Google account\n        google: {\n            // Client ID from Google Cloud Console\n            // Get this by creating a project at https://console.cloud.google.com\n            // Falls back to empty string (disables Google login if not set)\n            clientId: process.env.GOOGLE_CLIENT_ID || '',\n            \n            // Client Secret from Google Cloud Console\n            // This is a secret key - NEVER commit it to version control!\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\n        },\n    },\n\n    // ========================================================================\n    // SECURITY & SERVER CONFIGURATION\n    // ========================================================================\n    \n    // Secret key used to sign and verify tokens (JWT, sessions, etc.)\n    // Generate one using: node -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n    secret: process.env.BETTER_AUTH_SECRET || '',\n    \n    // Base URL of your backend application\n    // This is where Better Auth API endpoints will be hosted\n    // Example: https://api.yourdomain.com or http://localhost:8080\n    baseURL: process.env.BETTER_AUTH_URL || 'http://localhost:8080',\n    \n    // Base path for all Better Auth endpoints\n    // All auth endpoints will be under this path\n    // Example: /api/auth/signin, /api/auth/signup, /api/auth/signout\n    basePath: '/api/auth',\n\n    // ========================================================================\n    // CORS & TRUSTED ORIGINS\n    // ========================================================================\n    \n    // Array of trusted origins that can make requests to your auth endpoints\n    // This is important for CORS (Cross-Origin Resource Sharing) security\n    trustedOrigins: [\n        // Your backend URL - where the auth server is hosted\n        process.env.BETTER_AUTH_URL || 'http://localhost:8080',\n        \n        // Your frontend URL - where your web app is hosted\n        // Requests from this origin will be allowed\n        process.env.CLIENT_URL || 'http://localhost:3000',\n        \n        // Add more origins if you have multiple frontends:\n        // 'https://admin.yourdomain.com',\n        // 'https://mobile.yourdomain.com',\n    ],\n\n    // ========================================================================\n    // SESSION CONFIGURATION\n    // ========================================================================\n    \n    session: {\n        // Name of the cookie that stores the session token\n        // This cookie will be set in the user's browser\n        cookieName: 'better-auth.session_token',\n        \n        // How long a session lasts before it expires (in seconds)\n        // After this time, the user will need to sign in again\n        expiresIn: 60 * 60 * 24 * 7,\n        \n        // How often to update the session expiry time (in seconds)\n        // This implements a \"sliding window\" session - active users stay logged in\n        updateAge: 60 * 60 * 24,\n    },\n});\n\nexport type Auth = typeof auth;\n"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Setup ",(0,o.jsx)(e.code,{children:"src/app/email/email.service.ts"})]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"import { Injectable, Logger } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\nimport { ConfigService } from '@nestjs/config';\nimport * as dotenv from 'dotenv';\n\ndotenv.config();\n\nexport interface EmailOptions {\n    to: string | string[];\n    subject: string;\n    text?: string;\n    html?: string;\n    from?: string;\n}\n\n@Injectable()\nexport class EmailService {\n    private readonly logger = new Logger(EmailService.name);\n    private transporter: nodemailer.Transporter;\n\n    constructor(private configService: ConfigService) {\n        this.createTransporter();\n    }\n\n    private createTransporter() {\n        this.transporter = nodemailer.createTransport({\n            service: 'gmail',\n            auth: {\n                user: process.env.SMTP_USER,\n                pass: process.env.SMTP_PASS,\n            },\n        });\n\n        void this.verifyConnection();\n    }\n\n    private async verifyConnection() {\n        try {\n            await this.transporter.verify();\n            this.logger.log('K\u1ebft n\u1ed1i SMTP th\xe0nh c\xf4ng');\n        } catch (error) {\n            this.logger.error('L\u1ed7i k\u1ebft n\u1ed1i SMTP:', error);\n        }\n    }\n\n    async sendEmail(options: EmailOptions): Promise<boolean> {\n        try {\n            const mailOptions = {\n                from:\n                    options.from ||\n                    process.env.SMTP_FROM ||\n                    'dev.bxmt@projgis.link',\n                to: Array.isArray(options.to)\n                    ? options.to.join(', ')\n                    : options.to,\n                subject: options.subject,\n                text: options.text,\n                html: options.html,\n            };\n\n            const info = await this.transporter.sendMail(mailOptions);\n            this.logger.log(`Email \u0111\xe3 \u0111\u01b0\u1ee3c g\u1eedi th\xe0nh c\xf4ng: ${info.messageId}`);\n            return true;\n        } catch (error) {\n            this.logger.error('L\u1ed7i g\u1eedi email:', error);\n            return false;\n        }\n    }\n\n    async sendPasswordResetEmail(\n        to: string,\n        name: string,\n        url: string,\n    ): Promise<boolean> {\n        const subject = '\u0110\u1eb7t l\u1ea1i m\u1eadt kh\u1ea9u';\n\n        const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #333;\">\u0110\u1eb7t l\u1ea1i m\u1eadt kh\u1ea9u</h2>\n        <p>Xin ch\xe0o ${name},</p>\n        <p>Ch\xfang t\xf4i nh\u1eadn \u0111\u01b0\u1ee3c y\xeau c\u1ea7u \u0111\u1eb7t l\u1ea1i m\u1eadt kh\u1ea9u cho t\xe0i kho\u1ea3n c\u1ee7a b\u1ea1n.</p>\n\n        <div style=\"background-color: #f4f4f4; padding: 20px; margin: 20px 0; border-radius: 5px; text-align: center;\">\n          <a href=\"${url}\"\n             style=\"background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;\">\n            \u0110\u1eb7t l\u1ea1i m\u1eadt kh\u1ea9u\n          </a>\n        </div>\n\n        <p>N\u1ebfu b\u1ea1n kh\xf4ng y\xeau c\u1ea7u \u0111\u1eb7t l\u1ea1i m\u1eadt kh\u1ea9u, vui l\xf2ng b\u1ecf qua email n\xe0y.</p>\n        <p><strong>L\u01b0u \xfd:</strong> Link n\xe0y s\u1ebd h\u1ebft h\u1ea1n sau 1 gi\u1edd.</p>\n\n        <p>Tr\xe2n tr\u1ecdng,<br>\u0110\u1ed9i ng\u0169 Ecommerce Store</p>\n      </div>\n    `;\n\n        return this.sendEmail({\n            to,\n            subject,\n            html,\n        });\n    }\n\n    async sendVerificationEmail(\n        to: string,\n        name: string,\n        url: string,\n    ): Promise<boolean> {\n        const subject = 'X\xe1c th\u1ef1c email';\n\n        const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #333;\">X\xe1c th\u1ef1c email</h2>\n        <p>Xin ch\xe0o ${name},</p>\n        <p>C\u1ea3m \u01a1n b\u1ea1n \u0111\xe3 \u0111\u0103ng k\xfd t\xe0i kho\u1ea3n! Vui l\xf2ng x\xe1c th\u1ef1c email \u0111\u1ec3 ho\xe0n t\u1ea5t qu\xe1 tr\xecnh \u0111\u0103ng k\xfd.</p>\n\n        <div style=\"background-color: #f4f4f4; padding: 20px; margin: 20px 0; border-radius: 5px; text-align: center;\">\n          <a href=\"${url}\"\n             style=\"background-color: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;\">\n            X\xe1c th\u1ef1c email\n          </a>\n        </div>\n\n        <p>N\u1ebfu b\u1ea1n kh\xf4ng t\u1ea1o t\xe0i kho\u1ea3n n\xe0y, vui l\xf2ng b\u1ecf qua email n\xe0y.</p>\n\n        <p>Tr\xe2n tr\u1ecdng,<br>\u0110\u1ed9i ng\u0169 Ecommerce Store</p>\n      </div>\n    `;\n\n        return this.sendEmail({\n            to,\n            subject,\n            html,\n        });\n    }\n}\n"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Setup ",(0,o.jsx)(e.code,{children:".env"}),":"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-.env",children:"DB_HOST=\nDB_PORT=5434\nDB_USERNAME=\nDB_PASSWORD=\nDB_NAME=\n\n# Google OAuth\n// If user's emai has 2FA google authorization, see: https://nodemailer.com/usage/using-gmail\nSMTP_USER=\nSMTP_PASS=\nGOOGLE_CLIENT_ID=\nGOOGLE_CLIENT_SECRET=\n\n# Better Auth\nBETTER_AUTH_SECRET=\nBETTER_AUTH_URL=\nCLIENT_URL=\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:"https://mtikcodeecommerce.github.io/ecommerce-docs/img/google-2fa-config.png",alt:"Google Authorization 2FA config"})})]})}function m(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);